# bot.py

from telegram.ext import (
    ApplicationBuilder, CommandHandler, ConversationHandler,
    MessageHandler, filters, CallbackQueryHandler
)

from handlers import (
    MENU, CHOOSE_AQUARIUM,
    ADD_AQUARIUM_NAME, ADD_AQUARIUM_TYPE, ADD_AQUARIUM_VOLUME,
    AQUARIUM_MENU, PARAM_CHOOSE, PARAM_VALUE,
    HISTORY_MENU, HISTORY_PERIOD, HISTORY_YEAR, HISTORY_MONTH, HISTORY_PAGINATE,
    CONFIRM_ADD_MEASUREMENT, CHART_PARAM, SETTINGS, EDIT_NAME, EDIT_VOLUME, EDIT_TYPE, CONFIRM_DELETE, SERVICE_MENU,
    ADD_SERVICE_STEP, DELETE_SERVICE_STEP, MARK_DONE_STEP,
    NOTES_MENU, NOTE_ADD, NOTE_EDIT, NOTE_DELETE_CONFIRM,
)

from config import TELEGRAM_TOKEN

from handlers.base import start, menu
from handlers.aquarium import (
    show_aquariums, choose_aquarium,
    add_aquarium_start, add_aquarium_name,
    add_aquarium_type, add_aquarium_volume
)
from handlers.measurement import aquarium_menu_handler, param_choose, param_value, confirm_add_measurement
from handlers.history import (
    history_menu_handler, history_period_handler,
    history_month_handler, history_paginate_handler, history_year_handler
)

from handlers.charts import show_chart_handler, chart_param_handler

from handlers.settings import (
    edit_name_handler, set_name_handler,
    edit_volume_handler, set_volume_handler,
    edit_type_handler, set_type_handler,
    delete_aquarium_handler, confirm_delete_handler,
    settings_back_handler, settings_cancel_action
)

from handlers.advice import advice_handler

from handlers.service import (
    service_menu_handler, add_service_handler, add_service_step,
    mark_done_handler, mark_done_step, delete_service_handler, delete_service_step,
    add_service_period_callback,
    snooze_callback,
    delete_service_callback, mark_done_callback, done_force_callback, done_cancel_callback, add_service_remind_time_callback
)

from handlers.notes import (
    notes_menu_handler,
    notes_prev_page, notes_next_page, open_note_by_number,
    back_to_aquarium_from_reply, back_to_list_from_reply,
    note_edit_from_reply, note_add_handler, note_edit_save,
    note_delete_request, note_delete_confirm,
    note_pin_toggle_from_reply,
)

from reminder import reminder_job

async def start_reminders(app):
    app.create_task(reminder_job(app.bot))

def get_app():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).post_init(start_reminders).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            MENU: [
                MessageHandler(filters.Regex("^–ú–æ–∏ –∞–∫–≤–∞—Ä–∏—É–º—ã$"), show_aquariums),
                MessageHandler(filters.Regex("^–î–æ–±–∞–≤–∏—Ç—å –∞–∫–≤–∞—Ä–∏—É–º$"), add_aquarium_start),
                MessageHandler(filters.TEXT, menu),
            ],
            SETTINGS: [
                MessageHandler(filters.Regex("(?i)^–Ω–∞–∑–∞–¥$"), settings_back_handler),
                MessageHandler(filters.Regex("(?i)^–∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ$"), edit_name_handler),
                MessageHandler(filters.Regex("(?i)^–∏–∑–º–µ–Ω–∏—Ç—å –ª–∏—Ç—Ä–∞–∂$"), edit_volume_handler),
                MessageHandler(filters.Regex("(?i)^–∏–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø$"), edit_type_handler),
                MessageHandler(filters.Regex("(?i)^—É–¥–∞–ª–∏—Ç—å –∞–∫–≤–∞—Ä–∏—É–º$"), delete_aquarium_handler),
            ],
            EDIT_NAME: [
                MessageHandler(filters.Regex("(?i)^–Ω–∞–∑–∞–¥$"), settings_cancel_action),
                MessageHandler(filters.TEXT, set_name_handler)
            ],
            EDIT_VOLUME: [
                MessageHandler(filters.Regex("(?i)^–Ω–∞–∑–∞–¥$"), settings_cancel_action),
                MessageHandler(filters.TEXT, set_volume_handler)
            ],
            EDIT_TYPE: [
                MessageHandler(filters.Regex("(?i)^–Ω–∞–∑–∞–¥$"), settings_cancel_action),
                MessageHandler(filters.TEXT, set_type_handler)
            ],
            CONFIRM_DELETE: [
                MessageHandler(filters.Regex("(?i)^–Ω–∞–∑–∞–¥$"), settings_cancel_action),
                MessageHandler(filters.TEXT, confirm_delete_handler)
            ],
            
            CHOOSE_AQUARIUM: [MessageHandler(filters.TEXT, choose_aquarium)],
            ADD_AQUARIUM_NAME: [MessageHandler(filters.TEXT, add_aquarium_name)],
            ADD_AQUARIUM_TYPE: [MessageHandler(filters.TEXT, add_aquarium_type)],
            ADD_AQUARIUM_VOLUME: [MessageHandler(filters.TEXT, add_aquarium_volume)],
            AQUARIUM_MENU: [
                MessageHandler(filters.Regex("^–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ$"), service_menu_handler),
                MessageHandler(filters.Regex("^–ì—Ä–∞—Ñ–∏–∫$"), show_chart_handler),
                MessageHandler(filters.Regex("^–°–æ–≤–µ—Ç—ã$"), advice_handler),
                MessageHandler(filters.Regex("^üóí –ó–∞–º–µ—Ç–∫–∏$"), notes_menu_handler),
                MessageHandler(filters.TEXT, aquarium_menu_handler),
            ],
            SERVICE_MENU: [
                MessageHandler(filters.Regex("^–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ$"), add_service_handler),
                MessageHandler(filters.Regex("^–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ$"), mark_done_handler),
                MessageHandler(filters.Regex("^–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ$"), delete_service_handler),
                MessageHandler(filters.Regex(r"^\d+$"), mark_done_step),
                MessageHandler(filters.Regex(r"^\d+$"), delete_service_step),
                MessageHandler(filters.Regex("^–ù–∞–∑–∞–¥$"), aquarium_menu_handler),
            ],
            DELETE_SERVICE_STEP: [
                MessageHandler(filters.Regex("^–ù–∞–∑–∞–¥$"), service_menu_handler),
                MessageHandler(filters.Regex("^(–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ|–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ|–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ)$"), service_menu_handler),
                CallbackQueryHandler(delete_service_callback, pattern=r"^del_"),
            ],
            ADD_SERVICE_STEP: [
                CallbackQueryHandler(add_service_period_callback, pattern=r"^period_"),
                CallbackQueryHandler(add_service_remind_time_callback, pattern=r"^remind_"),
                MessageHandler(filters.TEXT, add_service_step),
            ],
            MARK_DONE_STEP: [
                MessageHandler(filters.Regex("^–ù–∞–∑–∞–¥$"), service_menu_handler),
                MessageHandler(filters.Regex("^(–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ|–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ|–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ)$"), service_menu_handler),
                CallbackQueryHandler(mark_done_callback, pattern=r"^done_"),
            ],
            NOTES_MENU: [
                # —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫: –¥–æ–±–∞–≤–∏—Ç—å, –Ω–∞–≤–∏–≥–∞—Ü–∏—è, –æ—Ç–∫—Ä—ã—Ç—å –ø–æ –Ω–æ–º–µ—Ä—É, –≤—ã–π—Ç–∏
                MessageHandler(filters.Regex("^‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É$"), note_add_handler),
                MessageHandler(filters.Regex("^‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–µ$"), notes_prev_page),
                MessageHandler(filters.Regex("^‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–µ$"), notes_next_page),
                MessageHandler(filters.Regex("^[1-5]$"), open_note_by_number),
                MessageHandler(filters.Regex("^‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –∞–∫–≤–∞—Ä–∏—É–º—É$"), back_to_aquarium_from_reply),

                # —ç–∫—Ä–∞–Ω –∑–∞–º–µ—Ç–∫–∏: —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, —É–¥–∞–ª–∏—Ç—å, –∑–∞–∫—Ä–µ–ø–∏—Ç—å, –Ω–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É
                MessageHandler(filters.Regex("^‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å$"), note_edit_from_reply),
                MessageHandler(filters.Regex("^üóë –£–¥–∞–ª–∏—Ç—å$"), note_delete_request),
                MessageHandler(filters.Regex("^üìå (–ó–∞–∫—Ä–µ–ø–∏—Ç—å|–û—Ç–∫—Ä–µ–ø–∏—Ç—å)$"), note_pin_toggle_from_reply),
                MessageHandler(filters.Regex("^‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É –∑–∞–º–µ—Ç–æ–∫$"), back_to_list_from_reply),
            ],

            # –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏
            NOTE_ADD: [
                MessageHandler(filters.PHOTO, note_add_handler),
                MessageHandler(filters.TEXT & ~filters.COMMAND, note_add_handler),
            ],

            # –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
            NOTE_EDIT: [
                MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∞$"), notes_menu_handler),
                MessageHandler(filters.TEXT & ~filters.COMMAND, note_edit_save),
            ],
            NOTE_DELETE_CONFIRM: [
                MessageHandler(
                    filters.Regex("^(‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å|‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è)$"),
                    note_delete_confirm
                ),
            ],
            PARAM_CHOOSE: [MessageHandler(filters.TEXT, param_choose)],
            PARAM_VALUE: [MessageHandler(filters.TEXT, param_value)],
            HISTORY_MENU: [MessageHandler(filters.Regex("^üìÖ –ò—Å—Ç–æ—Ä–∏—è$"), history_menu_handler)],
            HISTORY_PERIOD: [MessageHandler(filters.TEXT, history_period_handler)],
            HISTORY_YEAR: [MessageHandler(filters.TEXT, history_year_handler)],
            HISTORY_MONTH: [MessageHandler(filters.TEXT, history_month_handler)],
            HISTORY_PAGINATE: [MessageHandler(filters.TEXT, history_paginate_handler)],
            CONFIRM_ADD_MEASUREMENT: [MessageHandler(filters.TEXT, confirm_add_measurement)],
            CHART_PARAM: [MessageHandler(filters.TEXT, chart_param_handler)],
            
        },
        fallbacks=[MessageHandler(filters.COMMAND, start)],
        allow_reentry=True,
    )

    app.add_handler(conv)
    app.add_handler(CommandHandler("menu", menu))
    app.add_handler(CallbackQueryHandler(snooze_callback, pattern=r"^snooze_\d+_\d+$"))
    app.add_handler(CallbackQueryHandler(mark_done_callback, pattern=r"^done_\d+$"))
    app.add_handler(CallbackQueryHandler(done_force_callback, pattern=r"^doneforce_\d+$"))
    app.add_handler(CallbackQueryHandler(done_cancel_callback, pattern=r"^donecancel_\d+$"))
    return app