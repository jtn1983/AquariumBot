from telegram import Update, InputMediaPhoto
from telegram.ext import ContextTypes
from datetime import datetime
from db import Session, Note, Aquarium, NotePhoto
from handlers import NOTES_MENU, NOTE_ADD, NOTE_EDIT, NOTE_DELETE_CONFIRM, AQUARIUM_MENU
from utils.keyboards import aquarium_menu, notes_list_menu, note_view_menu, note_delete_confirm_menu, note_add_menu

PAGE_SIZE = 5


def _format_notes_page(session: Session, aquarium_id: int, page: int):
    q = (session.query(Note)
         .filter_by(aquarium_id=aquarium_id)
         .order_by(Note.is_pinned.desc(), Note.updated_at.desc()))
    total = q.count()
    notes = q.offset(page * PAGE_SIZE).limit(PAGE_SIZE).all()
    has_prev = page > 0
    has_next = (page + 1) * PAGE_SIZE < total

    page_map = {}
    lines = []
    if total == 0:
        lines.append("–ó–∞–º–µ—Ç–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.\n–ù–∞–∂–º–∏—Ç–µ ¬´‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É¬ª, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é.")
    else:
        for idx, n in enumerate(notes, start=1):
            page_map[str(idx)] = n.id
            pin = "üìå " if n.is_pinned else ""
            title = (n.title or (n.text[:30] + ("‚Ä¶" if len(n.text) > 30 else ""))) or "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"
            dt = n.updated_at.strftime("%d.%m.%Y %H:%M")
            lines.append(f"{idx}. {pin}{title}  ‚Äî  {dt}")
        lines.append("\n–ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∑–∞–º–µ—Ç–∫—É ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë –Ω–æ–º–µ—Ä (1‚Äì5).")

    return "\n".join(lines), page_map, has_prev, has_next, total


async def notes_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    aquarium_id = context.user_data.get("aquarium_id")
    if not aquarium_id:
        await update.effective_message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∞–∫–≤–∞—Ä–∏—É–º.", reply_markup=aquarium_menu())
        return AQUARIUM_MENU

    page = int(context.user_data.get("notes_page", 0))
    session = Session()
    text, page_map, has_prev, has_next, total = _format_notes_page(session, aquarium_id, page)

    context.user_data["notes_page"] = page
    context.user_data["notes_page_map"] = page_map

    title = session.get(Aquarium, aquarium_id).name
    head = f"–ó–∞–º–µ—Ç–∫–∏ –¥–ª—è ¬´{title}¬ª ({total}):" if total else f"–ó–∞–º–µ—Ç–∫–∏ –¥–ª—è ¬´{title}¬ª"
    await update.effective_message.reply_text(head)
    await update.effective_message.reply_text(text, reply_markup=notes_list_menu(has_prev, has_next))
    return NOTES_MENU

async def notes_prev_page(update: Update, context: ContextTypes.DEFAULT_TYPE):
    page = int(context.user_data.get("notes_page", 0))
    if page > 0:
        context.user_data["notes_page"] = page - 1
    return await notes_menu_handler(update, context)

async def notes_next_page(update: Update, context: ContextTypes.DEFAULT_TYPE):
    page = int(context.user_data.get("notes_page", 0))
    context.user_data["notes_page"] = page + 1
    return await notes_menu_handler(update, context)

async def open_note_by_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    num = update.message.text.strip()
    page_map = context.user_data.get("notes_page_map", {})
    if num not in page_map:
        await update.message.reply_text("–ù–æ–º–µ—Ä –≤–Ω–µ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ 1‚Äì5 –∏–ª–∏ –ª–∏—Å—Ç–∞–π—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")
        return NOTES_MENU
    note_id = page_map[num]
    return await note_view_show(update, context, note_id)

async def note_view_show(update: Update, context: ContextTypes.DEFAULT_TYPE, note_id: int):
    session = Session()
    note = session.get(Note, note_id)
    if not note:
        await update.effective_message.reply_text("–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return await notes_menu_handler(update, context)
    context.user_data["note_id"] = note.id
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ç–µ–∫—Å—Ç
    header = (
        f"<b>{note.title or '–ó–∞–º–µ—Ç–∫–∞'}</b>\n\n{note.text}\n\n"
        f"<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {note.updated_at.strftime('%d.%m.%Y %H:%M')}</i>"
    )
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª—å–±–æ–º–∞, –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ
    if note.photos:
        media = []
        for idx, ph in enumerate(note.photos):
            if idx == 0:
                media.append(InputMediaPhoto(ph.file_id, caption=header, parse_mode="HTML"))
            else:
                media.append(InputMediaPhoto(ph.file_id))
        await update.effective_message.reply_media_group(media)
        # –ü–æ—Å–ª–µ –∞–ª—å–±–æ–º–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await update.effective_message.reply_text("–î–µ–π—Å—Ç–≤–∏—è —Å–æ –∑–∞–º–µ—Ç–∫–æ–π:", reply_markup=note_view_menu(note.is_pinned))
    else:
        await update.effective_message.reply_text(header, parse_mode="HTML", reply_markup=note_view_menu(note.is_pinned))
    return NOTES_MENU

# ----- Actions via bottom keyboard -----
async def notes_add_from_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ (–∏–ª–∏ ¬´–û—Ç–º–µ–Ω–∞¬ª)." )
    return NOTE_ADD

async def back_to_aquarium_from_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.pop("notes_page_map", None)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.", reply_markup=aquarium_menu())
    return AQUARIUM_MENU

async def back_to_list_from_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await notes_menu_handler(update, context)

async def note_edit_from_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get("note_id"):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ –∑–∞–º–µ—Ç–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return NOTES_MENU
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ (–∏–ª–∏ ¬´–û—Ç–º–µ–Ω–∞¬ª)." )
    return NOTE_EDIT

async def note_delete_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get("note_id"):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ –∑–∞–º–µ—Ç–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return NOTES_MENU
    await update.message.reply_text("–£–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–º–µ—Ç–∫—É?", reply_markup=note_delete_confirm_menu())
    return NOTE_DELETE_CONFIRM

async def note_delete_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text.strip()
    note_id = context.user_data.get("note_id")
    if choice == "‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å" and note_id:
        session = Session()
        note = session.get(Note, note_id)
        if note:
            session.delete(note)
            session.commit()
            session.close()
        context.user_data.pop("note_id", None)
        await update.message.reply_text("–ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞.")
        return await notes_menu_handler(update, context)
    else:
        await update.message.reply_text("–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è.")
        return await note_view_show(update, context, note_id)

async def note_pin_toggle_from_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    note_id = context.user_data.get("note_id")
    if not note_id:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ –∑–∞–º–µ—Ç–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return NOTES_MENU
    session = Session()
    note = session.get(Note, note_id)
    if note:
        note.is_pinned = not note.is_pinned
        note.updated_at = datetime.utcnow()
        session.commit()
        session.close()
    return await note_view_show(update, context, note_id)


# ----- Saving text -----
async def note_add_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—è
    if 'new_note_text' not in context.user_data:
        context.user_data['new_note_text'] = ''
        context.user_data['new_note_photos'] = []
    # –ü–æ–∫–∞–∂–µ–º –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π
    await update.message.reply_text(
        "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ/—Ç–µ–∫—Å—Ç",
        reply_markup=note_add_menu()
    )

    text = update.message.text
    # Ignore initial add-button click
    if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É":
        return NOTE_ADD

    # –û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è
    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        context.user_data.pop('new_note_text', None)
        context.user_data.pop('new_note_photos', None)
        await update.message.reply_text("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=None)
        return await notes_menu_handler(update, context)
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
    if text == "‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å":
        aquarium_id = context.user_data.get("aquarium_id")
        session = Session()
        note = Note(
            aquarium_id=aquarium_id,
            user_id=update.effective_user.id,
            text=context.user_data['new_note_text'],
            created_at=datetime.utcnow(),
            updated_at=datetime.utcnow()
        )
        session.add(note)
        session.commit()
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
        for file_id, caption in context.user_data['new_note_photos']:
            photo = NotePhoto(note_id=note.id, file_id=file_id, caption=caption)
            session.add(photo)
        session.commit()
        session.close()
        # –û—á–∏—Å—Ç–∫–∞
        context.user_data.pop('new_note_text', None)
        context.user_data.pop('new_note_photos', None)
        await update.message.reply_text("–ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.", reply_markup=None)
        return await notes_menu_handler(update, context)

    # –ü—Ä–∏—ë–º —Ñ–æ—Ç–æ
    if update.message.photo:
        file_id = update.message.photo[-1].file_id
        caption = update.message.caption or ''
        context.user_data['new_note_photos'].append((file_id, caption))
        await update.message.reply_text("–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ.", reply_markup=note_add_menu())
        return NOTE_ADD

    # –ü—Ä–∏—ë–º —Ç–µ–∫—Å—Ç–∞ (–Ω–µ –∫–Ω–æ–ø–∫–∏)
    if text and text not in ["‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", "‚ùå –û—Ç–º–µ–Ω–∞", "‚ûï –§–æ—Ç–æ", "‚úèÔ∏è –¢–µ–∫—Å—Ç", "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"]:
        context.user_data['new_note_text'] = text
        await update.message.reply_text("–¢–µ–∫—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=note_add_menu())
        return NOTE_ADD

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
    if text == "‚ûï –§–æ—Ç–æ":
        await update.message.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏.", reply_markup=None)
        return NOTE_ADD
    if text == "‚úèÔ∏è –¢–µ–∫—Å—Ç":
        await update.message.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏.", reply_markup=None)
        return NOTE_ADD

    return NOTE_ADD

async def note_edit_save(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = update.message.text.strip()
    if txt.lower() == "–æ—Ç–º–µ–Ω–∞":
        return await notes_menu_handler(update, context)
    note_id = context.user_data.get("note_id")
    if not note_id:
        return await notes_menu_handler(update, context)
    session = Session()
    note = session.get(Note, note_id)
    if note:
        note.text = txt
        note.updated_at = datetime.utcnow()
        session.commit()
        session.close()
        await update.message.reply_text("–ò–∑–º–µ–Ω–µ–Ω–æ.")
    return await notes_menu_handler(update, context)